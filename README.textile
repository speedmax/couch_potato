h2. Couch Potato

... is a persistence layer written in ruby for CouchDB.

h3. Mission

The goal of Couch Potato is to create a minimal framework in order to store and retrieve Ruby objects to/from CouchDB and create and query views.

It follows the document/view/querying semantics established by CouchDB and won't try to mimic ActiveRecord behavior in any way as that IS BAD.

Lastly Couch Potato aims to provide a seemless integration with Ruby on Rails, e.g. routing, form helpers etc.

h3. Core Features

* persisting objects by including the CouchPotato::Persistence module
* declarative views with either custom or generated map/reduce functions
* extensive spec suite

h3. Installation

Couch Potato is hosted as a gem on github which you can install like this:

  sudo gem source --add http://gems.github.com # if you haven't already
  sudo gem install langalex-couch_potato
  
h4. Using with your ruby application:

  require 'rubygems'
  gem 'langalex-couch_potato'
  require 'couch_potato'
  CouchPotato::Config.database_name = 'name of the db'
  
Alternatively you can download or clone the source repository and then require lib/couch_potato.rb. 

h4. Using with Rails

Add to your config/environment.rb:

  config.gem 'langalex-couch_potato', :lib => 'couch_potato', :source => 'http://gems.github.com'

Then create a config/couchdb.yml:

  development: development_db_name
  test: test_db_name
  production: production_db_name

Alternatively you can also install Couch Potato directly as a plugin. 
 
h3. Introduction

This is a basic tutorial on how to use Couch Potato. If you want to know all the details feel free to read the specs.

h4. Save, load objects

First you need a class.

  class User
  end

To make instances of this class persistent include the persistence module:

  class User
    include CouchPotato::Persistence
  end

If you want to store any properties you have to declare them:

  class User
    include CouchPotato::Persistence
    
    property :name
  end

Now you can save your objects:

  user = User.new :name => 'joe'
  user.save # or save!

Properties:

  user.name # => 'joe'
  user.name = {:first => ['joe', 'joey'], :last => 'doe', :middle => 'J'} # you can set any ruby object that responds_to :to_json (includes all core objects)
  user._id # => "02097f33a0046123f1ebc0ebb6937269"
  user._rev # => "2769180384"
  user.created_at # => Fri Oct 24 19:05:54 +0200 2008
  user.updated_at # => Fri Oct 24 19:05:54 +0200 2008
  user.new? # => false, for compatibility new_record? will work as well

You can of course also retrieve your instance:

  User.get "02097f33a0046123f1ebc0ebb6937269" # => <#User 0x3075>

h4. Object validations

Couch Potato uses the validatable library for vaidation (http://validatable.rubyforge.org/)\

  class User
    property :name
    validates_presence_of :name
  end

  user = User.new
  user.valid? # => false
  user.errors.on(:name) # => [:name, 'can't be blank']

h4. Finding stuff

TBD

h4. Associations

Not supported. Not sure if they ever will be. (except for belongs_to)

h4. callbacks

Couch Potato supports the usual lifecycle callbacks known from ActiveRecord:

  class User
    include CouchPotato::Persistence
    
    before_create :do_something_before_create
    after_update :do_something_else
  end

This will call the method do_something_before_create before creating an object and do_something_else after updating one. Supported callbacks are: :before_validation_on_create, :before_validation_on_update, :before_validation_on_save, :before_create, :after_create, :before_update, :after_update, :before_save, :after_save, :before_destroy, :after_destroy
  
h4. Custom Views

*This is still in very early in development and of limited use*

This is useful if you have a set of documents that has not been created with Couch Potato, for example doesn't have a ruby_class attribute but you still want to be able to load those documents as instances of a Couch Potato class.

Example: Assuming you have a document like this:

{name: "joe"}

And a class:

  class User
    include CouchPotato::Persistence
    property :name
  end

To be able to load that user all you have to do is this:
  
  class User
    ...
    
    view :everyone
  end
  
  User.everyone

This will load all documents in your database as instances of User and assign their _id and name attributes.

If you have larger structures and you only want to load some attributes you can customize the view:

  {name: "joe", bio: "52 pages of text ...."}

  class User
    property :name
    property :bio
    
    view :everyone, :properties => [:name]
  end
  
  User.everyone.first.name # => "joe"
  User.everyone.first.bio # => nil

h3. Helping out

Please fix bugs, add more specs, implement new features by forking the github repo at http://github.com/langalex/couch_potato.

You can run all the specs by calling 'rake spec_unit' and 'rake spec_functional' in the root folder of Couch Potato. The specs require a running CouchDB instance at http://localhost:5984

I will only accept patches that are covered by specs - sorry.

h3. Contact

If you have any questions/suggestions etc. please contact me at alex at upstream-berlin.com or @langalex on twitter.
